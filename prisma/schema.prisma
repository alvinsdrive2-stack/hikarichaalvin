generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model achievement {
  id           String           @id
  userId       String
  type         achievement_type
  title        String
  description  String?          @db.Text
  targetValue  Int
  currentValue Int              @default(0)
  isCompleted  Boolean          @default(false)
  completedAt  DateTime?
  rewards      String?          @db.LongText
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
  user         user             @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Achievement_userId_fkey")

  @@unique([userId, type], map: "Achievement_userId_type_key")
}

model activity {
  id          String        @id
  userId      String
  type        activity_type
  title       String
  description String?       @db.Text
  metadata    String?       @db.LongText
  createdAt   DateTime      @default(now())
  user        user          @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Activity_userId_fkey")

  @@index([userId], map: "Activity_userId_fkey")
}

model border {
  id           String         @id
  name         String
  description  String?        @db.Text
  imageUrl     String
  price        Int?
  rarity       border_rarity
  isActive     Boolean        @default(true)
  sortOrder    Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  borderunlock borderunlock[]
}

model borderunlock {
  id         String                  @id
  userId     String
  borderId   String
  unlockType borderunlock_unlockType
  unlockedAt DateTime                @default(now())
  pricePaid  Int?
  border     border                  @relation(fields: [borderId], references: [id], onDelete: Cascade, map: "BorderUnlock_borderId_fkey")
  user       user                    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "BorderUnlock_userId_fkey")

  @@unique([userId, borderId], map: "BorderUnlock_userId_borderId_key")
  @@index([borderId], map: "BorderUnlock_borderId_fkey")
}

model pointtransaction {
  id          String                @id
  userId      String
  type        pointtransaction_type
  amount      Int
  description String?               @db.Text
  metadata    String?               @db.LongText
  createdAt   DateTime              @default(now())
  user        user                  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "PointTransaction_userId_fkey")

  @@index([userId], map: "PointTransaction_userId_fkey")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id               String             @id
  name             String?
  email            String             @unique(map: "User_email_key")
  emailVerified    DateTime?
  password         String?
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  role             user_role          @default(USER)
  bio              String?            @db.Text
  location         String?
  points           Int                @default(0)
  selectedBorder   String             @default("default")
  account          account[]
  achievement      achievement[]
  activity         activity[]
  borderunlock     borderunlock[]
  pointtransaction pointtransaction[]
  session          session[]
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model forum_categories {
  id            Int             @id @default(autoincrement())
  slug          String          @unique(map: "slug") @db.VarChar(50)
  name          String          @db.VarChar(100)
  description   String?         @db.Text
  color         String?         @default("gray") @db.VarChar(20)
  icon          String?         @db.VarChar(50)
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  updated_at    DateTime        @default(now()) @db.Timestamp(0)
  forum_threads forum_threads[]
}

model forum_likes {
  id          Int                     @id @default(autoincrement())
  user_id     String                  @db.VarChar(50)
  target_id   String                  @db.VarChar(20)
  target_type forum_likes_target_type
  created_at  DateTime                @default(now()) @db.Timestamp(0)

  @@unique([user_id, target_id, target_type], map: "unique_like")
  @@index([target_id, target_type], map: "idx_target")
  @@index([user_id], map: "idx_user")
}

model forum_replies {
  id                  String          @id @db.VarChar(20)
  thread_id           String          @db.VarChar(20)
  parent_id           String?         @db.VarChar(20)
  content             String          @db.Text
  author_id           String          @db.VarChar(50)
  likes               Int?            @default(0)
  is_deleted          Boolean?        @default(false)
  created_at          DateTime        @default(now()) @db.Timestamp(0)
  updated_at          DateTime        @default(now()) @db.Timestamp(0)
  forum_threads       forum_threads   @relation(fields: [thread_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "forum_replies_ibfk_1")
  forum_replies       forum_replies?  @relation("forum_repliesToforum_replies", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "forum_replies_ibfk_2")
  other_forum_replies forum_replies[] @relation("forum_repliesToforum_replies")

  @@index([parent_id], map: "forum_replies_ibfk_2")
  @@index([thread_id], map: "thread_id")
}

model forum_threads {
  id               String           @id @db.VarChar(20)
  title            String           @db.VarChar(200)
  content          String           @db.Text
  excerpt          String?          @db.VarChar(500)
  category_id      Int
  author_id        String           @db.VarChar(50)
  views            Int?             @default(0)
  likes            Int?             @default(0)
  replies          Int?             @default(0)
  is_pinned        Boolean?         @default(false)
  is_locked        Boolean?         @default(false)
  is_deleted       Boolean?         @default(false)
  created_at       DateTime         @default(now()) @db.Timestamp(0)
  updated_at       DateTime         @default(now()) @db.Timestamp(0)
  last_reply_at    DateTime?        @db.Timestamp(0)
  last_reply_by    String?          @db.VarChar(50)
  forum_replies    forum_replies[]
  forum_categories forum_categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "forum_threads_ibfk_1")
  forum_views      forum_views[]

  @@index([category_id], map: "category_id")
}

model forum_views {
  id            Int           @id @default(autoincrement())
  user_id       String?       @db.VarChar(50)
  thread_id     String        @db.VarChar(20)
  ip_address    String        @db.VarChar(45)
  user_agent    String?       @db.Text
  viewed_at     DateTime      @default(now()) @db.Timestamp(0)
  forum_threads forum_threads @relation(fields: [thread_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "forum_views_ibfk_1")

  @@index([thread_id, ip_address], map: "idx_thread_ip")
  @@index([thread_id, user_id], map: "idx_thread_user")
}

enum achievement_type {
  FIRST_FORUM_POST
  FORUM_REGULAR
  RECIPE_CREATOR
  SOCIAL_BUTTERFLY
  EXPLORER
  EARLY_ADOPTER
  PURCHASE_MASTER
  BORDER_COLLECTOR
  POINTS_COLLECTOR
  DAILY_VISITOR
  RECIPE_MASTER
  FORUM_EXPERT
  COMMENTATOR_PRO
  ACTIVE_MEMBER
}

enum activity_type {
  FORUM_POST
  FORUM_COMMENT
  RECIPE_CREATED
  RECIPE_LIKED
  PURCHASE
  PROFILE_UPDATE
  BADGE_EARNED
}

enum pointtransaction_type {
  EARNED
  SPENT
  ADMIN_GIVEN
  REFUND
}

enum borderunlock_unlockType {
  ACHIEVEMENT
  PURCHASE
  ADMIN
}

enum user_role {
  USER
  ADMIN
}

enum forum_likes_target_type {
  thread
  reply
}

enum border_rarity {
  Default
  Common
  Uncommon
  Rare
  Epic
  Legendary
  Mythic
  Bronze
  Silver
  Gold
}
