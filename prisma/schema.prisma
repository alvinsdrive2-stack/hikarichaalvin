generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Activity {
  id          String      @id @default(cuid())
  userId      String
  type        ActivityType
  title       String
  description String?     @db.Text
  metadata    Json?       // For storing additional data
  createdAt   DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Achievement {
  id            String         @id @default(cuid())
  userId        String
  type          AchievementType
  title         String
  description   String?        @db.Text
  targetValue   Int            // Target value to achieve (e.g., 10 posts)
  currentValue  Int            @default(0) // Current progress
  isCompleted   Boolean        @default(false)
  completedAt   DateTime?
  rewards       Json?          // Rewards data (e.g., border unlocks, points)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model Border {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  imageUrl    String   // URL to PNG/SVG border image
  price       Int?     // Price in points if available for purchase
  rarity      BorderRarity
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  borderUnlocks BorderUnlock[]
}

model BorderUnlock {
  id          String   @id @default(cuid())
  userId      String
  borderId    String
  unlockType  UnlockType // ACHIEVEMENT, PURCHASE, ADMIN
  unlockedAt  DateTime @default(now())
  pricePaid   Int?     // Points spent if purchased

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  border Border @relation(fields: [borderId], references: [id], onDelete: Cascade)

  @@unique([userId, borderId])
}

model PointTransaction {
  id          String      @id @default(cuid())
  userId      String
  type        PointType
  amount      Int
  description String?     @db.Text
  metadata    Json?       // Additional data
  createdAt   DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  bio             String?   @db.Text
  location        String?
  selectedBorder  String    @default("default")
  points          Int       @default(0) // User points for unlocking content
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            UserRole  @default(USER)

  accounts Account[]
  sessions Session[]
  activities Activity[]
  achievements Achievement[]
  borderUnlocks BorderUnlock[]
  pointTransactions PointTransaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ActivityType {
  FORUM_POST
  FORUM_COMMENT
  RECIPE_CREATED
  RECIPE_LIKED
  PURCHASE
  PROFILE_UPDATE
  BADGE_EARNED
}

enum AchievementType {
  FIRST_FORUM_POST      // Unlock bronze border
  FORUM_REGULAR         // 10 forum posts
  RECIPE_CREATOR        // 5 recipes created
  SOCIAL_BUTTERFLY      // 20 comments
  EXPLORER              // Visit all pages
  EARLY_ADOPTER         // Registered in first week
  PURCHASE_MASTER       // 5 purchases
  BORDER_COLLECTOR      // Unlock all borders
  POINTS_COLLECTOR      // 1000 points
  DAILY_VISITOR         // 7 day streak
  RECIPE_MASTER         // 25 recipes created
  FORUM_EXPERT          // 100 forum posts
  COMMENTATOR_PRO        // 100 comments
  ACTIVE_MEMBER         // 30 days active streak
}

enum UserRole {
  USER
  ADMIN
}

enum BorderRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum UnlockType {
  ACHIEVEMENT
  PURCHASE
  ADMIN
}

enum PointType {
  EARNED        // Points earned from activities
  SPENT         // Points spent on purchases
  ADMIN_GIVEN   // Points given by admin
  REFUND        // Points refunded
}
